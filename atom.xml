<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Abos Freeman</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yii2cms.com/"/>
  <updated>2017-09-18T01:19:16.000Z</updated>
  <id>http://yii2cms.com/</id>
  
  <author>
    <name>Abos Freeman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>knowledges</title>
    <link href="http://yii2cms.com/2017/09/18/skills/knowledges/"/>
    <id>http://yii2cms.com/2017/09/18/skills/knowledges/</id>
    <published>2017-09-18T01:17:00.000Z</published>
    <updated>2017-09-18T01:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p><a href="http://www.cnblogs.com/yuyijq/p/3424473.html" target="_blank" rel="external">zoo keeper 是什么</a><br><a href="https://github.com/brpc/brpc" target="_blank" rel="external">rpc 是什么</a></p>
<h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;links&quot;&gt;&lt;a href=&quot;#links&quot; class=&quot;headerlink&quot; title=&quot;links&quot;&gt;&lt;/a&gt;links&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yuyijq/p/3424473.html&quot; tar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>most difficult scenario in my career(职业生涯遇到的最难的问题)</title>
    <link href="http://yii2cms.com/2017/08/13/skills/most-difficult-scenario-in-my-career/"/>
    <id>http://yii2cms.com/2017/08/13/skills/most-difficult-scenario-in-my-career/</id>
    <published>2017-08-13T09:43:00.000Z</published>
    <updated>2017-08-28T01:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="real-business-case"><a href="#real-business-case" class="headerlink" title="real business case"></a>real business case</h3><ol>
<li>评论业务， 数据存储问题、数据实时问题。<br>大数据量与并发访问量， 对于落地数据与缓存数据的结构设计没有线索。</li>
<li>hatchjs, 项目开发与规划。<br>没有经验，不清楚应该如何去开发，编写代码。</li>
<li>bbts 编写公共代码库并推动同事依照规范使用<br>3.1 公共代码库这个问题的推动除了代码上的能力外，还涉及同事之间较敏感的问题。<br>3.2 同职级的同事如何信服、如何愿意去用。</li>
</ol>
<h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><p>最大的困难是未知。<br>畏首畏尾。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;real-business-case&quot;&gt;&lt;a href=&quot;#real-business-case&quot; class=&quot;headerlink&quot; title=&quot;real business case&quot;&gt;&lt;/a&gt;real business case&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="career distributed system" scheme="http://yii2cms.com/tags/career-distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>eggjs tutorial</title>
    <link href="http://yii2cms.com/2017/08/13/skills/nodejs/eggjs-tutorial/"/>
    <id>http://yii2cms.com/2017/08/13/skills/nodejs/eggjs-tutorial/</id>
    <published>2017-08-13T09:25:42.000Z</published>
    <updated>2017-08-13T16:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eggjs-的插件"><a href="#eggjs-的插件" class="headerlink" title="eggjs 的插件"></a>eggjs 的插件</h1><ol>
<li><p>插件总结起来，其实是加载插件后，执行一段逻辑。<br>至于插件里是做Middleware， 还是注册一个组件， 都是按照需求来的。</p>
</li>
<li><p>这么说， 是不是可以有一个插件是用来管理插件的？<br>应该是多余了，框架本身就可以做这些事情了。</p>
</li>
<li><p>middleware 是每个请求都会被调用一次，差点误会了。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;eggjs-的插件&quot;&gt;&lt;a href=&quot;#eggjs-的插件&quot; class=&quot;headerlink&quot; title=&quot;eggjs 的插件&quot;&gt;&lt;/a&gt;eggjs 的插件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;插件总结起来，其实是加载插件后，执行一段逻辑。&lt;br&gt;至于插件里是
    
    </summary>
    
    
      <category term="nodejs eggjs" scheme="http://yii2cms.com/tags/nodejs-eggjs/"/>
    
  </entry>
  
  <entry>
    <title>from one mysql to distibuted mysql (从单个mysql实例单个表到分表到分库分表)</title>
    <link href="http://yii2cms.com/2017/08/07/skills/distribute/from-one-mysql-to-distributed-dbs/"/>
    <id>http://yii2cms.com/2017/08/07/skills/distribute/from-one-mysql-to-distributed-dbs/</id>
    <published>2017-08-07T03:12:29.000Z</published>
    <updated>2017-08-27T15:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一开始的评论服务很简单，-只是部分小业务在用"><a href="#一开始的评论服务很简单，-只是部分小业务在用" class="headerlink" title="一开始的评论服务很简单， 只是部分小业务在用"></a>一开始的评论服务很简单， 只是部分小业务在用</h1><ol>
<li>后来专辑也需要加评论</li>
<li>后来歌单也需要加评论</li>
<li>后来歌曲也需要加评论</li>
<li>点赞数数据</li>
<li>点赞列表数据</li>
<li>redis 内存膨胀</li>
<li>redis 内存数据丢失</li>
<li>好在容错率高(评论服务数据出错很难有用户会发现，而且也不会造成太大损失)</li>
<li>小业务的评论积累起来数据也变得非常多了</li>
<li>对接一个新的业务有多难</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>分布式服务最大的难点应该是配置与管理。 如何管理各个服务器、如何更新、使用对应的配置。</li>
<li>实例通过传参会比较好</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一开始的评论服务很简单，-只是部分小业务在用&quot;&gt;&lt;a href=&quot;#一开始的评论服务很简单，-只是部分小业务在用&quot; class=&quot;headerlink&quot; title=&quot;一开始的评论服务很简单， 只是部分小业务在用&quot;&gt;&lt;/a&gt;一开始的评论服务很简单， 只是部分小业务
    
    </summary>
    
    
      <category term="distributed-server-side-system" scheme="http://yii2cms.com/tags/distributed-server-side-system/"/>
    
  </entry>
  
  <entry>
    <title>load balance (负载均衡方案)</title>
    <link href="http://yii2cms.com/2017/08/01/skills/distribute/load-balance/"/>
    <id>http://yii2cms.com/2017/08/01/skills/distribute/load-balance/</id>
    <published>2017-08-01T12:48:29.000Z</published>
    <updated>2017-08-01T13:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h1><h1 id="负载均衡的方案有哪些"><a href="#负载均衡的方案有哪些" class="headerlink" title="负载均衡的方案有哪些"></a>负载均衡的方案有哪些</h1><h1 id="各种方案的实现与痛点"><a href="#各种方案的实现与痛点" class="headerlink" title="各种方案的实现与痛点"></a>各种方案的实现与痛点</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是负载均衡&quot;&gt;&lt;a href=&quot;#什么是负载均衡&quot; class=&quot;headerlink&quot; title=&quot;什么是负载均衡&quot;&gt;&lt;/a&gt;什么是负载均衡&lt;/h1&gt;&lt;h1 id=&quot;负载均衡的方案有哪些&quot;&gt;&lt;a href=&quot;#负载均衡的方案有哪些&quot; class=&quot;head
    
    </summary>
    
    
      <category term="distributed-server-side-system" scheme="http://yii2cms.com/tags/distributed-server-side-system/"/>
    
  </entry>
  
  <entry>
    <title>multiple-server-unit-solution (异地多单元多主架构方案)</title>
    <link href="http://yii2cms.com/2017/08/01/skills/distribute/multiple-server-unit-solution/"/>
    <id>http://yii2cms.com/2017/08/01/skills/distribute/multiple-server-unit-solution/</id>
    <published>2017-08-01T12:48:29.000Z</published>
    <updated>2017-08-06T15:20:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是异地多单元多主架构？"><a href="#什么是异地多单元多主架构？" class="headerlink" title="什么是异地多单元多主架构？"></a>什么是异地多单元多主架构？</h1><h1 id="异地机房的容灾方案发展历史"><a href="#异地机房的容灾方案发展历史" class="headerlink" title="异地机房的容灾方案发展历史"></a>异地机房的容灾方案发展历史</h1><h1 id="各种方案的实现与痛点"><a href="#各种方案的实现与痛点" class="headerlink" title="各种方案的实现与痛点"></a>各种方案的实现与痛点</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是异地多单元多主架构？&quot;&gt;&lt;a href=&quot;#什么是异地多单元多主架构？&quot; class=&quot;headerlink&quot; title=&quot;什么是异地多单元多主架构？&quot;&gt;&lt;/a&gt;什么是异地多单元多主架构？&lt;/h1&gt;&lt;h1 id=&quot;异地机房的容灾方案发展历史&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="distributed-server-side-system" scheme="http://yii2cms.com/tags/distributed-server-side-system/"/>
    
  </entry>
  
  <entry>
    <title>multiple-server-unit-solution (异地多单元多主架构方案)</title>
    <link href="http://yii2cms.com/2017/08/01/skills/distribute/mysql-optimize/"/>
    <id>http://yii2cms.com/2017/08/01/skills/distribute/mysql-optimize/</id>
    <published>2017-08-01T12:48:29.000Z</published>
    <updated>2017-08-25T10:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是异地多单元多主架构？"><a href="#什么是异地多单元多主架构？" class="headerlink" title="什么是异地多单元多主架构？"></a>什么是异地多单元多主架构？</h1><h1 id="异地机房的容灾方案发展历史"><a href="#异地机房的容灾方案发展历史" class="headerlink" title="异地机房的容灾方案发展历史"></a>异地机房的容灾方案发展历史</h1><h1 id="各种方案的实现与痛点"><a href="#各种方案的实现与痛点" class="headerlink" title="各种方案的实现与痛点"></a>各种方案的实现与痛点</h1><h1 id="异地机房数据同步坑"><a href="#异地机房数据同步坑" class="headerlink" title="异地机房数据同步坑"></a>异地机房数据同步坑</h1><ol>
<li>异地双主双备互相同步， 每条 sql 本身会执行一次</li>
<li>由于业务需要，通过 dbasync 将某数据通过 mysql client 导入数据库</li>
<li>因此出现了4个问题<br>3.1 由于 sql dbasync与 mysql 本身数据同步执行的顺序与业务本身的要求不同，可能导致业务数据错误<br>3.2 由于 sql dbasync与 mysql 本身数据同步执行的顺序, 会导致数据与主键不一致。<br>3.3 假如数据中又包含唯一键，则有可能导致两边数据库同步失败<br>3.4 所有的 sql 都会执行2次，导致db性能瓶颈。<br>解决方案:<br>dbasync的 mysql 操作要么单边， 要么完全不能要。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是异地多单元多主架构？&quot;&gt;&lt;a href=&quot;#什么是异地多单元多主架构？&quot; class=&quot;headerlink&quot; title=&quot;什么是异地多单元多主架构？&quot;&gt;&lt;/a&gt;什么是异地多单元多主架构？&lt;/h1&gt;&lt;h1 id=&quot;异地机房的容灾方案发展历史&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="distributed-server-side-system" scheme="http://yii2cms.com/tags/distributed-server-side-system/"/>
    
  </entry>
  
  <entry>
    <title>redis-cluster-debug-log about</title>
    <link href="http://yii2cms.com/2017/07/30/skills/redis/redis-cluster-debug-log-of-crash/"/>
    <id>http://yii2cms.com/2017/07/30/skills/redis/redis-cluster-debug-log-of-crash/</id>
    <published>2017-07-30T15:52:42.000Z</published>
    <updated>2017-08-02T15:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景-background"><a href="#背景-background" class="headerlink" title="背景(background)"></a>背景(background)</h3><ol>
<li>公司： xxx</li>
<li>业务: 评论</li>
<li>问题:</li>
<li>备注: 刚到公司一个多月的我，在没有任何人指导、讲解任何业务的情况下努力争取熟悉业务、努力融入到业务同事的社交环境去。</li>
</ol>
<h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3><p>怎样讲好一个故事。</p>
<p>redis 集群节点释放内存也是很坑</p>
<h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><ol>
<li>Redis 机器不要与业务机器放到一起， 否则CPU之间会互相影响</li>
<li>Redis 集群的内存配置要规划好，同一机器上的 redis集群内存总和不要大于机器内存</li>
<li>高并发业务不能写上一个固定的key，否则会对一个节点进行大量查询， 相当于原本发放到x个节点的压力集中到1个节点去了，失去了集群的意义</li>
<li>守护进程脚本请求数据时要有sleep， 不能持续请求mysql, redis等服务， 否则会造成大量压力</li>
<li>守护进程必须设置在一段时间后自行退出，不能跑太久， 否则会出现服务异常导致奇异bug。</li>
<li>主从节点不能防在同一台。</li>
<li>当某节点出现qps、cpu表现比其他更高、有异常的时候则可以考虑用strace对那个server进行监控，看看是哪些命令常驻， 大部分时候是一些没有分布式特性的key(strace -p 54235 -e read -s 1024 -o 54235.strace.log 这个命令拯救世界)</li>
<li>当一个url请求里，redis请求可能获取不到数据、且事务性要求不高时，可以在超时、异常时直接断开，返回500， 让其他请求可以顺利进行。(或者不一定每个redis命令失败时都断开， 只需要断开入口处常用的)</li>
<li>表状态的redis key如果做了过期，会影响代码上判断的分歧， 比如null和0</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景-background&quot;&gt;&lt;a href=&quot;#背景-background&quot; class=&quot;headerlink&quot; title=&quot;背景(background)&quot;&gt;&lt;/a&gt;背景(background)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;公司： xxx&lt;/li&gt;
&lt;li&gt;业
    
    </summary>
    
    
      <category term="redis cluster C10K" scheme="http://yii2cms.com/tags/redis-cluster-C10K/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器 oss 的使用</title>
    <link href="http://yii2cms.com/2017/07/30/skills/aliyun/oss/"/>
    <id>http://yii2cms.com/2017/07/30/skills/aliyun/oss/</id>
    <published>2017-07-30T15:52:42.000Z</published>
    <updated>2017-07-31T16:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个简单的bucket用来放公网访问的图片资源异常方便<br>不过还是建议用自有域名cname过去比较好， 方便以后迁移</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个简单的bucket用来放公网访问的图片资源异常方便&lt;br&gt;不过还是建议用自有域名cname过去比较好， 方便以后迁移&lt;/p&gt;

    
    </summary>
    
    
      <category term="aliyun oss" scheme="http://yii2cms.com/tags/aliyun-oss/"/>
    
  </entry>
  
  <entry>
    <title>picking-up-scrapy-to-crawl-netease-music</title>
    <link href="http://yii2cms.com/2017/05/28/picking-up-scrapy-to-crawl-netease-music/"/>
    <id>http://yii2cms.com/2017/05/28/picking-up-scrapy-to-crawl-netease-music/</id>
    <published>2017-05-28T13:09:56.000Z</published>
    <updated>2017-05-28T15:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h1><ol>
<li>picking up and review</li>
<li>coding</li>
<li>storage</li>
</ol>
<h2 id="picking-up-and-review"><a href="#picking-up-and-review" class="headerlink" title="picking up and review"></a>picking up and review</h2><p>Scrapy 1.2.1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source /path/to/virtualenv/scrapy/bin/activate</div><div class="line">cd /path/to/scrapyprojects/</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;menu&quot;&gt;&lt;a href=&quot;#menu&quot; class=&quot;headerlink&quot; title=&quot;menu&quot;&gt;&lt;/a&gt;menu&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;picking up and review&lt;/li&gt;
&lt;li&gt;coding&lt;/li&gt;
&lt;li&gt;storage&lt;/
    
    </summary>
    
    
      <category term="python scrapy netease music" scheme="http://yii2cms.com/tags/python-scrapy-netease-music/"/>
    
  </entry>
  
  <entry>
    <title>understanding nodejs co</title>
    <link href="http://yii2cms.com/2017/04/23/skills/nodejs/understanding-nodejs-co/"/>
    <id>http://yii2cms.com/2017/04/23/skills/nodejs/understanding-nodejs-co/</id>
    <published>2017-04-23T14:42:42.000Z</published>
    <updated>2017-04-26T15:49:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="(http://www.blackganglion.com/2016/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3generator%E4%B8%8Eco%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/)" title="参考来源">参考来源</a></p>
<h3 id="nodejs-异步"><a href="#nodejs-异步" class="headerlink" title="nodejs 异步"></a>nodejs 异步</h3><ol>
<li>callback 直接了当，无需理解就明白原理，但 debug 和调试难度大</li>
<li>generator 用 “同步” 的形式编写异步的代码</li>
<li>promise + generator 的解决方案</li>
<li>co 提供了自动 then/next 的功能</li>
</ol>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ol>
<li>yield 虽然是迭代器，但在 co 里， 本身已经是同步的逻辑放置到 yield 后没有意义</li>
<li>yield 后必须跟异步的逻辑、语句</li>
<li>yield 跟 普通函数、数字、计算 没有意义（同1, 对应了 co 接受的 thunk 必须是接受一个第一个参数为异常、第二个参数为返回值的 callback， 传入其它的函数会导致 co 继续 ）</li>
</ol>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ol>
<li>promise 的初始化是立刻执行的</li>
<li>promise 等待着 resolve/reject 的召唤</li>
</ol>
<h3 id="co"><a href="#co" class="headerlink" title="co"></a>co</h3><ol>
<li>co 的目的是 自动 then/next， 没了</li>
<li>co 的返回必然是 Promise</li>
<li>co resolve/reject 的作用是后续的 then 的绑定事件可以继续了</li>
</ol>
<h3 id="thunkify-delay-execution-of-a-function"><a href="#thunkify-delay-execution-of-a-function" class="headerlink" title="thunkify (delay execution of a function)"></a>thunkify (delay execution of a function)</h3><p>粗暴地讲， generator thunkified 之后，<br>需要强化的意识， generator 的执行是被切割的， 每一层之间是被阻塞、中断掉的。<br>被分割的逻辑可以被看成3个部分</p>
<ol>
<li>generator 里至当前 yield 之前的逻辑</li>
<li>generator 里当前 yield 后一语句逻辑</li>
<li>generator 外执行被延迟的实际逻辑</li>
</ol>
<p>一个有 n 个 yield 的 generator 正常的执行逻辑:</p>
<ol>
<li>初始化                -&gt; 返回函数指针</li>
<li>第1个 next()          -&gt; 抵达第1个 yield, 并返回 yield 后一语句的值(函数)</li>
<li><p>第1个 yield 返回的函数  -&gt; 执行实际被延迟的逻辑，</p>
<p>此时，关键的地方来了， 第2个 next() 由谁触发?<br>答案： <em>必须</em>是在实际被延迟的逻辑执行完毕时触发， 触发方式是回调, 协议是第1个参数为错误信息，第2个参数为第2个 next() 的参数， 即是第一个 yield 的左值</p>
</li>
<li><p>抵达第2个 yield</p>
</li>
</ol>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">fileName</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    fs.readFile(fileName, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">      callback(err, data.toString());</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'next 1'</span>)</div><div class="line">  <span class="keyword">var</span> res1 = <span class="keyword">yield</span> readFile(path.join(__dirname, <span class="string">'1.txt'</span>));</div><div class="line">  <span class="built_in">console</span>.log(res1);  <span class="comment">// 1.txt中的内容</span></div><div class="line">  <span class="keyword">var</span> res2 = <span class="keyword">yield</span> readFile(path.join(__dirname, <span class="string">'2.txt'</span>));</div><div class="line">  <span class="built_in">console</span>.log(res2);  <span class="comment">// 2.txt中的内容</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'test3'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'initialized'</span>)</div><div class="line"></div><div class="line">g.next().value(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">  g.next(res).value(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(g.next(res)); <span class="comment">// &#123; value: 'test3', done: true &#125;</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;(http://www.blackganglion.com/2016/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3generator%E4%B8%8Eco%E6%BA%90%E7%A0%81%E8%A7%A3%E6%
    
    </summary>
    
    
      <category term="nodejs generator eggjs" scheme="http://yii2cms.com/tags/nodejs-generator-eggjs/"/>
    
  </entry>
  
  <entry>
    <title>python basic syntax</title>
    <link href="http://yii2cms.com/2017/03/29/skills/python/syntax/"/>
    <id>http://yii2cms.com/2017/03/29/skills/python/syntax/</id>
    <published>2017-03-29T12:24:42.000Z</published>
    <updated>2017-04-19T16:40:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use index to iterate two list</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</div><div class="line">     list1[i] = <span class="number">2</span></div><div class="line">     list2[i] = <span class="number">3</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;loop&quot;&gt;&lt;a href=&quot;#loop&quot; class=&quot;headerlink&quot; title=&quot;loop&quot;&gt;&lt;/a&gt;loop&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
    
      <category term="python27" scheme="http://yii2cms.com/tags/python27/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yii2cms.com/2017/03/29/hello-world/"/>
    <id>http://yii2cms.com/2017/03/29/hello-world/</id>
    <published>2017-03-29T10:22:59.000Z</published>
    <updated>2017-03-29T10:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
