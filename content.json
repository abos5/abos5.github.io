[{"title":"knowledges","date":"2017-09-18T01:17:00.000Z","path":"2017/09/18/skills/knowledges/","text":"linkszoo keeper 是什么rpc 是什么 conclusion","tags":[]},{"title":"most difficult scenario in my career(职业生涯遇到的最难的问题)","date":"2017-08-13T09:43:00.000Z","path":"2017/08/13/skills/most-difficult-scenario-in-my-career/","text":"real business case 评论业务， 数据存储问题、数据实时问题。大数据量与并发访问量， 对于落地数据与缓存数据的结构设计没有线索。 hatchjs, 项目开发与规划。没有经验，不清楚应该如何去开发，编写代码。 bbts 编写公共代码库并推动同事依照规范使用3.1 公共代码库这个问题的推动除了代码上的能力外，还涉及同事之间较敏感的问题。3.2 同职级的同事如何信服、如何愿意去用。 conclusion最大的困难是未知。畏首畏尾。","tags":[{"name":"career distributed system","slug":"career-distributed-system","permalink":"http://yii2cms.com/tags/career-distributed-system/"}]},{"title":"docker readme (入门大全)","date":"2017-08-13T09:25:42.000Z","path":"2017/08/13/skills/docker/readme/","text":"入门书籍阿里云安装","tags":[{"name":"nodejs eggjs","slug":"nodejs-eggjs","permalink":"http://yii2cms.com/tags/nodejs-eggjs/"}]},{"title":"eggjs tutorial","date":"2017-08-13T09:25:42.000Z","path":"2017/08/13/skills/nodejs/eggjs-tutorial/","text":"eggjs 的插件 插件总结起来，其实是加载插件后，执行一段逻辑。至于插件里是做Middleware， 还是注册一个组件， 都是按照需求来的。 这么说， 是不是可以有一个插件是用来管理插件的？应该是多余了，框架本身就可以做这些事情了。 middleware 是每个请求都会被调用一次，差点误会了。 完善的架构需要哪些 rpc 服务注册与发现 zookeeper 统一配置 zookeeper 统一配置更新 jenkins 持续集成 docker 服务构建 git server 统一代码服务 user info 用户信息 数据查看后台 代码规范, redis key 使用 代码规范, errors 信息整合 user storage12. 跨机房同步1.","tags":[{"name":"nodejs eggjs","slug":"nodejs-eggjs","permalink":"http://yii2cms.com/tags/nodejs-eggjs/"}]},{"title":"from one mysql to distibuted mysql (从单个mysql实例单个表到分表到分库分表)","date":"2017-08-07T03:12:29.000Z","path":"2017/08/07/skills/distribute/from-one-mysql-to-distributed-dbs/","text":"一开始的评论服务很简单， 只是部分小业务在用 后来专辑也需要加评论 后来歌单也需要加评论 后来歌曲也需要加评论 点赞数数据 点赞列表数据 redis 内存膨胀 =&gt; redis 不适合用来做大数据的落地服务， 特别是带有明显冷热区分的数据 redis 内存数据丢失 好在容错率高(评论服务数据出错很难有用户会发现，而且也不会造成太大损失) 小业务的评论积累起来数据也变得非常多了 对接一个新的业务有多难 总结 分布式服务最大的难点应该是配置与管理。 如何管理各个服务器、如何更新、使用对应的配置。 实例通过传参会比较好","tags":[{"name":"distributed-server-side-system","slug":"distributed-server-side-system","permalink":"http://yii2cms.com/tags/distributed-server-side-system/"}]},{"title":"load balance (负载均衡方案)","date":"2017-08-01T12:48:29.000Z","path":"2017/08/01/skills/distribute/load-balance/","text":"什么是负载均衡负载均衡的方案有哪些各种方案的实现与痛点","tags":[{"name":"distributed-server-side-system","slug":"distributed-server-side-system","permalink":"http://yii2cms.com/tags/distributed-server-side-system/"}]},{"title":"multiple-server-unit-solution (异地多单元多主架构方案)","date":"2017-08-01T12:48:29.000Z","path":"2017/08/01/skills/distribute/multiple-server-unit-solution/","text":"什么是异地多单元多主架构？异地机房的容灾方案发展历史各种方案的实现与痛点","tags":[{"name":"distributed-server-side-system","slug":"distributed-server-side-system","permalink":"http://yii2cms.com/tags/distributed-server-side-system/"}]},{"title":"multiple-server-unit-solution (异地多单元多主架构方案)","date":"2017-08-01T12:48:29.000Z","path":"2017/08/01/skills/distribute/mysql-optimize/","text":"什么是异地多单元多主架构？异地机房的容灾方案发展历史各种方案的实现与痛点异地机房数据同步坑 异地双主双备互相同步， 每条 sql 本身会执行一次 由于业务需要，通过 dbasync 将某数据通过 mysql client 导入数据库 因此出现了4个问题3.1 由于 sql dbasync与 mysql 本身数据同步执行的顺序与业务本身的要求不同，可能导致业务数据错误3.2 由于 sql dbasync与 mysql 本身数据同步执行的顺序, 会导致数据与主键不一致。3.3 假如数据中又包含唯一键，则有可能导致两边数据库同步失败3.4 所有的 sql 都会执行2次，导致db性能瓶颈。解决方案:dbasync的 mysql 操作要么单边， 要么完全不能要。","tags":[{"name":"distributed-server-side-system","slug":"distributed-server-side-system","permalink":"http://yii2cms.com/tags/distributed-server-side-system/"}]},{"title":"redis-memory-analyze","date":"2017-07-30T15:52:42.000Z","path":"2017/07/30/skills/redis/redis-memory-analyze/","text":"author AbosFreeman (Oct 25, 2017 19:37) 如何分析redis 内存占用情况大纲 效果图 资源 流程 注意事项 开发技巧 环境要求 (@todo)最后, docker 教程 (@todo)最后2, 自动导出 excel 与制图 相关文章 资源 redis-rdb-tools scripts 效果图 内部数据不外放 流程12345678910# 拉取 rdb 二进制文件(rdb文件既redis的db文件)/path/to/redis-cli -c -h $&#123;ip&#125; -p $&#123;port&#125; --rdb $&#123;d&#125;.$&#123;ip&#125;.$&#123;port&#125;.rdb# 解析 rdb 文件为文本，格式内容为# database,type,key,size_in_bytes,encoding,num_elements,len_largest_element/path/to/rdb -c memory $&#123;rdbfile&#125; &gt; $&#123;redkfile&#125;# awk 统计key的内存分布 (需要预先配置前缀与描述，如果没有统计到的会打印出来)# 刚开始分析一个 新的集群 的内存分布或者集群 新增key前缀类型 时都需要更新stat文件里的indice变量./scripts/detail.stat.sh $&#123;redkfile&#125; &gt; $&#123;statfile&#125; 注意事项 不要对 master 节点执行 –rdb 操作(在脚本里已经做了过滤，如果的话目前只会写日志到errorlog里) 开发技巧 不对 redis 集群使用队列 不对 redis 集群使用接近常量的 redis key (实在不行可自建shard, 一份数据保存在多个key里,读时使用随机的key) 支持 php5.3 版本的 phpredis 有bug, 当节点出问题后脚本会死循环导致节点产生大量 MOVED 异常 尽量避免对集群使用大size的 hash, set, zset list \b类型基本不使用 环境要求 安装基于 python rdb-tools redis-cli (3.2.9) 最低版本不了解， 但需要支持 –rdb 操作 一开始需要一步步整理redis key前缀 相关文章 redis集群 内存分布设计之槽点迁移","tags":[{"name":"redis cluster","slug":"redis-cluster","permalink":"http://yii2cms.com/tags/redis-cluster/"}]},{"title":"阿里云服务器 oss 的使用","date":"2017-07-30T15:52:42.000Z","path":"2017/07/30/skills/aliyun/oss/","text":"创建一个简单的bucket用来放公网访问的图片资源异常方便不过还是建议用自有域名cname过去比较好， 方便以后迁移","tags":[{"name":"aliyun oss","slug":"aliyun-oss","permalink":"http://yii2cms.com/tags/aliyun-oss/"}]},{"title":"redis-cluster-debug-log about","date":"2017-07-30T15:52:42.000Z","path":"2017/07/30/skills/redis/redis-cluster-debug-log-of-crash/","text":"背景(background) 公司： xxx 业务: 评论 问题: 备注: 刚到公司一个多月的我，在没有任何人指导、讲解任何业务的情况下努力争取熟悉业务、努力融入到业务同事的社交环境去。 问题详情怎样讲好一个故事。 redis 集群节点释放内存也是很坑 问题总结 Redis 机器不要与业务机器放到一起， 否则CPU之间会互相影响 Redis 集群的内存配置要规划好，同一机器上的 redis集群内存总和不要大于机器内存 高并发业务不能写上一个固定的key，否则会对一个节点进行大量查询， 相当于原本发放到x个节点的压力集中到1个节点去了，失去了集群的意义 守护进程脚本请求数据时要有sleep， 不能持续请求mysql, redis等服务， 否则会造成大量压力 守护进程必须设置在一段时间后自行退出，不能跑太久， 否则会出现服务异常导致奇异bug。 主从节点不能防在同一台。 当某节点出现qps、cpu表现比其他更高、有异常的时候则可以考虑用strace对那个server进行监控，看看是哪些命令常驻， 大部分时候是一些没有分布式特性的key(strace -p 54235 -e read -s 1024 -o 54235.strace.log 这个命令拯救世界) 当一个url请求里，redis请求可能获取不到数据、且事务性要求不高时，可以在超时、异常时直接断开，返回500， 让其他请求可以顺利进行。(或者不一定每个redis命令失败时都断开， 只需要断开入口处常用的) 表状态的redis key如果做了过期，会影响代码上判断的分歧， 比如null和0","tags":[{"name":"redis cluster C10K","slug":"redis-cluster-C10K","permalink":"http://yii2cms.com/tags/redis-cluster-C10K/"}]},{"title":"picking-up-scrapy-to-crawl-netease-music","date":"2017-05-28T13:09:56.000Z","path":"2017/05/28/picking-up-scrapy-to-crawl-netease-music/","text":"menu picking up and review coding storage picking up and reviewScrapy 1.2.1 12source /path/to/virtualenv/scrapy/bin/activatecd /path/to/scrapyprojects/","tags":[{"name":"python scrapy netease music","slug":"python-scrapy-netease-music","permalink":"http://yii2cms.com/tags/python-scrapy-netease-music/"}]},{"title":"understanding nodejs co","date":"2017-04-23T14:42:42.000Z","path":"2017/04/23/skills/nodejs/understanding-nodejs-co/","text":"参考来源 nodejs 异步 callback 直接了当，无需理解就明白原理，但 debug 和调试难度大 generator 用 “同步” 的形式编写异步的代码 promise + generator 的解决方案 co 提供了自动 then/next 的功能 generator yield 虽然是迭代器，但在 co 里， 本身已经是同步的逻辑放置到 yield 后没有意义 yield 后必须跟异步的逻辑、语句 yield 跟 普通函数、数字、计算 没有意义（同1, 对应了 co 接受的 thunk 必须是接受一个第一个参数为异常、第二个参数为返回值的 callback， 传入其它的函数会导致 co 继续 ） promise promise 的初始化是立刻执行的 promise 等待着 resolve/reject 的召唤 co co 的目的是 自动 then/next， 没了 co 的返回必然是 Promise co resolve/reject 的作用是后续的 then 的绑定事件可以继续了 thunkify (delay execution of a function)粗暴地讲， generator thunkified 之后，需要强化的意识， generator 的执行是被切割的， 每一层之间是被阻塞、中断掉的。被分割的逻辑可以被看成3个部分 generator 里至当前 yield 之前的逻辑 generator 里当前 yield 后一语句逻辑 generator 外执行被延迟的实际逻辑 一个有 n 个 yield 的 generator 正常的执行逻辑: 初始化 -&gt; 返回函数指针 第1个 next() -&gt; 抵达第1个 yield, 并返回 yield 后一语句的值(函数) 第1个 yield 返回的函数 -&gt; 执行实际被延迟的逻辑， 此时，关键的地方来了， 第2个 next() 由谁触发?答案： 必须是在实际被延迟的逻辑执行完毕时触发， 触发方式是回调, 协议是第1个参数为错误信息，第2个参数为第2个 next() 的参数， 即是第一个 yield 的左值 抵达第2个 yield 示例代码123456789101112131415161718192021222324252627var fs = require('fs');var path = require('path')function readFile(fileName) &#123; return function(callback) &#123; fs.readFile(fileName, function(err, data) &#123; callback(err, data.toString()); &#125;); &#125;&#125;var gen = function*() &#123; console.log('next 1') var res1 = yield readFile(path.join(__dirname, '1.txt')); console.log(res1); // 1.txt中的内容 var res2 = yield readFile(path.join(__dirname, '2.txt')); console.log(res2); // 2.txt中的内容 return 'test3';&#125;var g = gen();console.log('initialized')g.next().value(function(err, res) &#123; g.next(res).value(function(err, res) &#123; console.log(g.next(res)); // &#123; value: 'test3', done: true &#125; &#125;);&#125;);","tags":[{"name":"nodejs generator eggjs","slug":"nodejs-generator-eggjs","permalink":"http://yii2cms.com/tags/nodejs-generator-eggjs/"}]},{"title":"python basic syntax","date":"2017-03-29T12:24:42.000Z","path":"2017/03/29/skills/python/syntax/","text":"loop12345use index to iterate two listfor i in list1: list1[i] = 2 list2[i] = 3","tags":[{"name":"python27","slug":"python27","permalink":"http://yii2cms.com/tags/python27/"}]},{"title":"Hello World","date":"2017-03-29T10:22:59.000Z","path":"2017/03/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]